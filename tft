#!/bin/bash
dummy= #_G and nil --[[
   script=$(readlink -f "$0")
   origin=${script%/*}
   completions=/dev/null
   [ -f $origin/completions ] && completions=$origin/completions
   exec rlwrap -b ":(){}[],+-=&^%$#@\"';|\\"  \
	       -f $completions		     \
	       -c -H $HOME/.${script##*/}_history \
	       lua "$script" "$@"
--]]

local origin=(arg and (arg[0]:match '^(.*)/') or '.')

package.path=origin..'/?.lua'..';'..package.path
package.cpath=origin..'/?.so'..';'..package.cpath
require 'util'
require 'elfutil'
marshal=require 'freezer'
require 'ljcurses'
require 'cpiofns'
require 'utilfns'
bad_offers = require 'bad_offers'

-- The private mods share a private environment.  The idea is to
-- remove functions from state-save files by using fewer closures,
-- but not create a lot of global namespace pollution.
do
   local private_mods = { 'resolver', 'tagfile', 'editor' }
   local global = _G
   local environment = setmetatable({},
      { __index = function(t,k) t[k]=global[k]; return global[k] end })
   for _, mod in ipairs(private_mods) do
      local fn = package.loaders[2](mod)
      if not type(fn) == 'function' then error(fn) end
      setfenv(fn, environment)
      fn()
   end
   environment.object_type = setmetatable({}, { __mode = 'k'})
   function environment.make_object(objtype, object)
      environment.object_type[object] = objtype
      return(object)
   end
end
pp=require 'pprint'
function pt(t,l) io.write(pp.pformat(t, {depth_limit = l or 1}),'\n') end
if arg[1] == '-h' then
   print('Usage: '..arg[0]..' savefile...')
   os.exit(0)
end
print 'Welcome to the Slackware Tagfile Tool'
sf={}
for ix, savefile in ipairs(arg) do
   sf[ix] = reconstitute(savefile)
   print(('Reading save file %s into sf[%d].'):
	 format(savefile:match '([^/]*)$', ix))
end

logwin=require'logwin'
--lw=logwin()

io.write '> '
local command, print_it
local function print_error(error)
   print((error:gsub('^[^:]*:(.*)$', 'stdin:%1')))
end
for line in io.stdin:lines() do
   if not command and line:lower():match '^[%s]*help[%s]*$' then
      os.execute('man tft')
   else
      if not command then
	 command = line
	 print_it = line:match '^=(.*)$'
	 if print_it then command = 'return '..print_it end
      else
	 command = command .. '\n' .. line
      end
      local chunk, error = loadstring(command, '')
      if not chunk then
	 if not error:find('<eof>') or print_it then
	    print_error(error)
	    command, print_it = nil
	 else
	    io.write '>> '
	 end
      else
	 (function (success, ...)
	       if not success then error = ...
	       elseif print_it then print(...)
	 end end)(pcall(chunk))
	 if error then print_error(error) end
	 command, print_it = nil
      end
   end
   if not command then io.write '> ' end
end

os.exit(0)

-- Local Variables:
-- mode: lua
-- End:
