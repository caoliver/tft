#!/bin/bash
dummy= #_G and nil --[[
   script=$(readlink -f "$0")
   origin=${script%/*}
   completions=/dev/null
   [ -f $origin/completions ] && completions=$origin/completions
   exec rlwrap -b ":(){}[],+-=&^%$#@\"';|\\"  \
	       -f $completions		     \
	       -c -H $HOME/.${script##*/}_history \
	       lua "$script" "$@"
--]]

local origin=(arg and (arg[0]:match '^(.*)/') or '.')

package.path=origin..'/?.lua'..';'..package.path
package.cpath=origin..'/?.so'..';'..package.cpath
require 'util'
require 'elfutil'
marshal=require 'freezer'
require 'ljcurses'
require 'cpiofns'
require 'utilfns'
require 'resolver'
require 'tagfile'
require 'editor'
bad_offers = require 'bad_offers'
pp=require 'pprint'
function pt(t,l) io.write(pp.pformat(t, {depth_limit = l or 1}),'\n') end
if arg[1] == '-h' then
   print('Usage: '..arg[0]..' savefile...')
   os.exit(0)
end
print 'Welcome to the Slackware Tagfile Tool'
sf={}
for ix, savefile in ipairs(arg) do
   sf[ix] = reconstitute(savefile)
   print(('Reading save file %s into sf[%d].'):
	 format(savefile:match '([^/]*)$', ix))
end

io.write '> '
local command, print_it
local function print_error(error)
   print((error:gsub('^[^:]*:(.*)$', 'stdin:%1')))
end
for line in io.stdin:lines() do
   if not command and line:lower():match '^[%s]*help[%s]*$' then
      local help = io.open(origin..'/help-cli.txt')
      if help then
	 print(help:read '*a')
	 help:close()
      else
	 print 'No help installed.  :-('
      end
   else
      if not command then
	 command = line
	 print_it = line:match '^=(.*)$'
	 if print_it then command = 'return '..print_it end
      else
	 command = command .. '\n' .. line
      end
      local chunk, error = loadstring(command, '')
      if not chunk then
	 if not error:find('<eof>') or print_it then
	    print_error(error)
	    command, print_it = nil
	 else
	    io.write '>> '
	 end
      else
	 (function (success, ...)
	       if not success then error = ...
	       elseif print_it then print(...)
	 end end)(pcall(chunk))
	 if error then print_error(error) end
	 command, print_it = nil
      end
   end
   if not command then io.write '> ' end
end

os.exit(0)

-- Local Variables:
-- mode: lua
-- End:
